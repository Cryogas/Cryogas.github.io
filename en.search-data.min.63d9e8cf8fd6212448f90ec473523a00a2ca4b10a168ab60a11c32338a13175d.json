[{"id":0,"href":"/content/wgmy24/","title":"WGMY 2024 Writeup","section":"Content","content":"\rIntroduction\r#\rThis is my first time participating in wargames.my.\nDue to some time management issues, I started to solve the challenges 3 hours before the competition ends. Nevertheless, here are my write-ups for 2 easy challenges. It\u0026#39;s honest work The DCM Meta (Easy)\r#\rThis challenge was supposed to be easy, but I managed to not solve it because one minor error in my code. ü§¶üèª (I set i \u0026lt; 31 , which made my flag length is less by 1)\nHere is the corrected code for your reference.\nscramble = \u0026#34;f63acd3b78127c1d7d3e700b55665354\u0026#34; sequence = [25, 10, 0, 3, 17, 19, 23, 27, 4, 13, 20, 8, 24, 21, 31, 15, 7, 29, 6, 1, 9, 30, 22, 5, 28, 18, 26, 11, 2, 14, 16, 12] # print(len(scramble)) i = 0 seq_i = 0 solved = [] while i \u0026lt; 32: solved += scramble[sequence[seq_i]] seq_i += 1 i += 1 solved = \u0026#34;\u0026#34;.join(solved) print(f\u0026#34;wgmy{{{solved}}}\u0026#34;) Unwanted Meow (Medium, but actually easy)\r#\rAfter inspecting the bytes in the attached file, there are a lot of \u0026ldquo;meow\u0026quot;s which corrupts the file. I tried replacing them using hexed.io but it will take a long time. So many meow meow Then I realized.. why not use Cyberchef?\nBy using the \u0026ldquo;Find/Replace\u0026rdquo; function and using the magic wand immediately, a sorta distorted image is recovered. I tried to submit the flag consisting of the viewable letters, and it\u0026rsquo;s not the correct flag. Why u cacat bro? The reason of this phenomenon is there are still \u0026ldquo;meow\u0026quot;s concealed due to the challenge creator\u0026rsquo;s smart method of wrapping a meow within another meow.\nMeow in the meow! To overcome this issue, I tried to replace input with output first before rendering the image to ensure the outer layer \u0026ldquo;meow\u0026quot;s are also removed.\nFinally the image is restored successfully. Restored! Conclusion\r#\rI lied actually about the starting time in the introduction. I was stuck doing the blockchain challenge in the morning causing me to give up midway. However, I continued to solve challenges at night due to the love of the game (plus I can\u0026rsquo;t sleep after a long nap in the afternoon)\nSee ya!\n"},{"id":1,"href":"/content/uscctf24/","title":"USC CTF Writeup","section":"Content","content":"\rIntroduction\r#\rOver the weekend, I had participated in USC CTF hosted by University of Southern California. Here are some writeup of challenges I managed to solve. It\u0026#39;s honest work Concoction (rev)\r#\rFinally my first rev writeup! (it\u0026rsquo;s a beginner\u0026rsquo;s challenge üòÖ)\nAn executable file is given, asking for some ingredients to craft a potion.\nTo solve the challenge, use Ghidra to view the decompiled code. There are a lot of if-else conditions. However,to print the flag, variable bVar1 must be true.\nStandard input and the corresponding variables Condition to change bVar1 to true The conditions to get bVar1 == true is given, therefore, convert the hex values of each corresponding variable into decimal format and insert them when prompted.\n- local d0 (crypto crickets) = 7914 - local cc (forensic fungi) = 111100 - local c8 (osint oreos) = 2310 - local c4 (plants of pwn) = 51337 - local c0 (rev redcaps) = 42154142 - local bc (cobwebs) = 9111 - local b8 (ounces of water) = Any number greater than 1 will do Variable b8 is not a condition, therefore, any value will do as long as it is greater than 0.\nThe string input prompt in the end must be \u0026ldquo;decompiler\u0026rdquo; as it is also one of the conditions.\nSolved!\nExample of values input(ounces of water does not matter) FLAG: CYBORG{RECIPE=7914-111100-2310-51337-42154142-9111-decompiler}\nTommy\u0026rsquo;s Artventures (Web)\r#\rAn URL is given, which redirects to an AI art page. In order to login to the page, create an temporary account. Login Page During the navigation to \u0026ldquo;curate\u0026rdquo; page, a messaged shown indicating the login user must be admin. Message in Curate page Based on the secret key attached in the challenge, it is clear that reforging of the session cookie is required. Firstly, copy the cookie from \u0026ldquo;Inspect \u0026gt; Application and decode the cookie to check the format. (There is another way using Burpsuite, but I am not sure how üòÖ)\nFind the cookie in \u0026#34;Inspect\u0026#34; To create a new cookie, I used this website as a reference, and the CLI command is attached below. (Remember to install the tool first)\npip3 install flask-unsign flask-unsign --sign --cookie \u0026#34;{\u0026#39;user\u0026#39;: \u0026#39;admin\u0026#39;}\u0026#34; --secret \u0026#39;THE-SECRET-KEY\u0026#39; After changing the forged cookie, the session is currently logged in as admin, and the flag is found in the \u0026lsquo;curate\u0026rsquo; page.\nDecode and sign cookie using flask-unsign tool Successfully logged in as admin Flag is shown in \u0026#34;Curate\u0026#34; page. FLAG: CYBORG{oce4n5_auth3N71ca7i0N}\nBuildings (OSINT)\r#\rA pdf file was attached with contents of buildings, and I assumed that these buildings are in USC.\nThe flag format is CRYPTO, therefore no investigation is needed for the first 6 pictures (pictures before the curly braces).\nThese are the names of the buildings for the flags, index them accordingly using their acronyms, and the flag is found! BRI CKS FLAG: CRYPTO{BRICKS}\nRedWoods (misc)\r#\rA .jar file is attached.\nUse WinRAR to unzip the jar file. There are 3 files inside.\nTo open the class file, use an online Java decompiler to decompile and view the Main.class file.\nDecompiled code After going through the code, the code does nothing much by just printing out the message in the flags array. Therefore, the flag is assumed to be in this array.\nstatic String[] flags = new String[]{\u0026#34;ccccccccccagccccccchdbgdddehcccccagcccchdbgccehcccccagddddhdbgdddehgcccccccccccccecccedddddddd\u0026#34;, \u0026#34;dddeagcgchhdbcccccagcccccccccchdbgccegcedddeddddeccccccccccccccccceddddddddddddddehhccccccaggccccchhdbggdddeddddddddddde\u0026#34;, \u0026#34;ddehhccccccaggdddddhhdbggdeehhcccccccccccaggcccchhdbggehhcccccaggdddddhhdbggeagcgchhdbabccccccaggdddhhdbggehcccccceehhcce\u0026#34;}; Combine all three array elements together to form a long string. However, the string does not mean anything after analyzing with Cipher Identifier.\nNext, use AperiSolve to analyze the image. There is a hidden message. By looking at the symbols, it is easily identified as the Brainfuck cipher. Hidden message (Is it the reason of the naming for the challenge?)ü§î Use any word editor to replace the alphabets with the symbol given, and decrypt the new ciphertext. The flag is found!\nBrainfuck message as below:\n++++++++++[\u0026gt;+++++++\u0026lt;-]\u0026gt;---.\u0026lt;+++++[\u0026gt;++++\u0026lt;-]\u0026gt;++.\u0026lt;+++++[\u0026gt;----\u0026lt;-]\u0026gt;---.\u0026lt;\u0026gt;+++++++++++++.+++.-----------.[\u0026gt;+\u0026gt;+\u0026lt;\u0026lt;-]+++++[\u0026gt;++++++++++\u0026lt;-]\u0026gt;++.\u0026gt;+.---.----.+++++++++++++++++.--------------.\u0026lt;\u0026lt;++++++[\u0026gt;\u0026gt;+++++\u0026lt;\u0026lt;-]\u0026gt;\u0026gt;---.-----------.--.\u0026lt;\u0026lt;++++++[\u0026gt;\u0026gt;-----\u0026lt;\u0026lt;-]\u0026gt;\u0026gt;-..\u0026lt;\u0026lt;+++++++++++[\u0026gt;\u0026gt;++++\u0026lt;\u0026lt;-]\u0026gt;\u0026gt;.\u0026lt;\u0026lt;+++++[\u0026gt;\u0026gt;-----\u0026lt;\u0026lt;-]\u0026gt;\u0026gt;.[\u0026gt;+\u0026gt;+\u0026lt;\u0026lt;-][]++++++[\u0026gt;\u0026gt;---\u0026lt;\u0026lt;-]\u0026gt;\u0026gt;.\u0026lt;++++++..\u0026lt;\u0026lt;++. Decrypted Message FLAG: CYBORG{HEARD_TR33_F4LL}\nConclusion\r#\rOverall, the CTF contains various challenges suitable for players from different levels. Some challenges were really out of my knowledge. I will try to understand them and do better next time. (I got rank 79th btw) Anyway\u0026hellip;\n"},{"id":2,"href":"/content/IBOH24/","title":"IBOH 2024 Writeup","section":"Content","content":"\rIntroduction\r#\rThe annual main event of CTF in Asia Pacific University (APU): International Battle of Hackers, hosted by FSEC-CC, with amazing CTF players from not only Malaysia, but other countries such as Singapore and Indonesia participating.\nThe challenges were difficult in my opinion, and most of them were removed after the event, therefore I did not manage to screenshot the solution for most of them.\nTherefore, here is my humble writeup for one of the crypto challenge: I\u0026rsquo;ll Kill Yall. Enjoy.\nIt\u0026#39;s honest work Crypto: I\u0026rsquo;ll Kill Yall\r#\rThe challenge provides an attachment of a hand-written message, looks like it\u0026rsquo;s ciphered.\nCreepy Message After searching in the web, the cipher is identified as the \u0026lsquo;Zodiac Killer Cipher\u0026rsquo;. One of the biggest mystery till this day.\nAt first the cipher text was unreadable, however, the symbol with a circle and cross should be at the bottom, therefore the image is rotated 180 degrees.\nFound this online Readable now.. To crack the cipher, head on to this webpage and enter the code manually.\nThis is the returned message, which doesn\u0026rsquo;t mean a thing. What does it mean? To reveal the full ciphered message, increase the height byte value using Hexeditor, and the full message is revealed. Increase height byte Full encrypted message Note that the original image cannot be rotated before changing the height byte, else the note will not reveal.\nFailed to reveal message Rotate the revealed cipher and redo the deciphering process , a plaintext message will show üò®. Deciphered Message The flag should start after \u0026lsquo;THIS IS THE FLAG\u0026rsquo;, which is \u0026lsquo;KILLINGPEOPLEE?AFSTOPFED\u0026rsquo;. But the flag was rejected when entered.\nAfter sanity checking with the challenge creator, turns out the question mark should be replaced by \u0026lsquo;z\u0026rsquo;, as there is a bug within the calculation of the deciphering process, causing the question mark to appear.\nSanity Check Message I was dumb enough to try the new flag \u0026lsquo;KILLINGPEOPLEEZAFSTOPFED\u0026rsquo;, which was rejected again btw.\nAfter reading the message a few times, it doesn\u0026rsquo;t make sense to include everything after EZAF.\nFLAG: IBOH24{KILLINGPEOPLEEZAF}\nConclusion\r#\rOur team have won 4th place for local category! ü•≥\nCould not have done it without my teammates: ZD \u0026amp; Yvonne ü•∞ü•∞ü•∞ Till next time! üò¨ "},{"id":3,"href":"/content/FSIIECCTF24/","title":" FSIIEC CTF Writeup","section":"Content","content":"\rIntroduction\r#\rThis is my writeup for FSIIEC CTF.\nBoss Password\r#\rAn obfuscated passage is given.\nTo deobfuscate the passage, look at the hint closely\u0026hellip; Hint The hint obviosuly states the key is \u0026ldquo;to be as sneaky as possible\u0026rdquo;\nJust take the message literally and use it as a key to decode the message and convert the message to MD5 hash. Solved! Kagegakure\r#\rTo solve this challenge, I used curl -L command on Linux (Ubuntu) to read all the contents on the website.\nThe flag.php looks suspicious, so I change the path to query the \u0026lsquo;flag\u0026rsquo; page, and the flag is discovered!\nThe flag usbchall\r#\rA image file was given, containing an image and a PDF\nTo solve the challenge, I used Aperi Solve to analyze the image. And the flag is found in the \u0026lsquo;Strings\u0026rsquo; section. Flag Conclusion\r#\rWhile there are some other challenges I solved, they are not posted as they were too easy for everyone.\n(Almost solved a hard OSINT challenge but\u0026hellip; )\nUntil then!\n"},{"id":4,"href":"/content/DUCTF24/","title":"DownUnderCTF24 Writeup","section":"Content","content":"\rüí° DownUnderCTF, the Largest CTF in the Southern Hemisphere!\rThe challenges in this CTF are hard! But I managed to solve some of the easier challenges, so here is my writeup for DownUnderCTF!\nMISC\r#\rDiscord\r#\rThe challenge requires us to get the flag in Discord server.\nTo do this, we just search for \u0026ldquo;DUCTF\u0026rdquo; in the Discord chat.\nFound Part 1 Looking around for some time, but could\u0026rsquo;nt find the second part..\nWait a minute, might be sent by the same guy.. Gotcha! FLAG: DUCTF{f1r57_0f_m4ny}\ntldr please summarize\r#\rA docx file is attached, might be hiding some kind of secret message.\nTest Some of the content in the docx file The passage is so long, so I did not bother to read.\nAs I scroll through the document, something caught my attention. Abnormal tiny wavy lines at the bottom.\nSus... I selected all and changed the font color, which reveals the actual hidden text. Looks like a shell script. After executing the script in Kali Terminal, the flag is found!\nOpen /temp.sh FLAG: DUCTF{chatgpt_I_n33d_2_3scap3}\nCrypto\r#\rSun Zi\u0026rsquo;s Perfect Math Class\r#\rA webpage link is embedded, which brings us to a webpage to solve a math question.\nThe question Sun zi reminds me of Chinese Remainder Theorem I read the other day. I have put the solution below, How I get the minimum value of n The question states that the number of soldiers is between 1000 and 1100, in order to find n, we can keep adding (3 * 5 * 7) to 194, so that n fulfills the 3 modulo equations.\nWe will get 194, 299 \u0026hellip; 929, 1034, 1139,\u0026hellip;.\nTherefore the answer is 1034 üòä\nThe answer is correct! Wait, there is a part 2\u0026hellip;\nshufflebox\r#\rFor this challenge, a shuffled code is given to us to recover the message\nThe answer is correct! I have done a challenge which looks like this before: awa-jelly\nTherefore, I\u0026rsquo;ll just find out the sequence and recover the flag.\nFLAG: DUCTF{udiditgjwowsuper}\nOSINT\r#\rofftheramp\r#\rThis is an easy challenge, but for some reason, I am stuck for at least 5 hours\u0026hellip; ü§¶üèª (Please read till the end to see how I wasted 5 hours üëç)\nAn image of a dock is given, requiring us to discover the name of the structure.\nIt all started when I saw hundreds of solves within the first few hours of the challenge\u0026rsquo;s release\u0026hellip;\nShould be an easy question, right?\n(For me ü§°) First approach:\nJust look around the whole Australia for docks on Google Maps, because how hard can it be?\nTurns out it is very hard\u0026hellip; and not very practical..\nSecond approach:\nGoogle Lens\nIt doesn\u0026rsquo;t really return good results until I found the small image in this article:\nFrankston.. let me look around the area..\nAfter some searching around, I found the exact view from Google Maps.\nThe exact same spot? I entered State_Road_3 as the flag, but the answer is wrong.. damn\nI asked the mods for help, turns out I was at the right place all along, now I just need to find the name of the STRUCTURE.\nThe struggle is REAL After changing it back to street view, I finally found the \u0026ldquo;structure\u0026rdquo;\u0026hellip;\nFINALLY! After reading the official writeup,\nTurns out the exact coordinates of the location can be found using EXIF Tools..\nGOD WHYY U DO THIS TO ME??\nHow to save 5 hours of life This is me after reading the writeup I am a clueless rakun Pondering life and the decisions that led you to this point. -sir nosurf\nNow I understand what you meant by then ü§°\nFLAG: DUCTF{Oliver_Hill_Boat_Ramp}\ncityviews\r#\rAn image is given to determine where the photo is taken.\nFirst thing I noticed is the brand logo that looks like a blue palm.\nBy utilizing Google Images, I found a page which resembles the logo, and the address is at 699 Bourke Street, and the logo is AGL\u0026rsquo;s logo. After fiddling around with Google Maps Satelite View, I managed to get an angle that resembles the image, with the advertisement screen and the old building.\nLooking at the picture, there is this high-arch windows, which can be found on the street view of 575 Flinders Ln. Almost there! I tried using Holiday Inn as the flag, but it was wrong.\nAfter a few guesses, I found the flag!\nFLAG: DUCTF{Hotel_Indigo}\nBridget Lives\r#\rAn image was given for us to find where the photo is taken.\nBy using Google Images, the most relevant result is Jiak Kim Bridge in Singapore, but after closely examining it, the bridge in the given image is completely different from the Jiak Kim Bridge.\nJust keep looking..\nFinally I found a result, which may be the solution!\nAfter watching the video, I am now 100% sure this is the place! Robertson Bridge So the flag is the building next to it, which is Four Points by Sheraton.\nA better view FLAG: DUCTF{Four_Points}\nback to the jungle\r#\rMC Fat Monke just dropped a new track???\nI googled online for this infamous artist, and here are the results.\nThe YouTube Link leads us to a sick mixtape.\nThe key to the flag is at 2:34 of the video, where there is a link to another website.\nThe flag is in plain sight after the page is loaded!\nFLAG: DUCTF{wIr_G0iNg_b4K_t00_d3r_jUNgL3_mIt_d15_1!!111!}\nThey\u0026rsquo;re Making Decoys\r#\rThis is my favorite OSINT challenge because it is relatively hard.\nAn image is given for us to find the coordinates of the location (rounded in 4 decimal places) of the \u0026ldquo;fake\u0026rdquo; emus.\nI have searched for some keywords such as \u0026ldquo;fake emus\u0026rdquo;, \u0026ldquo;emu metal statue\u0026rdquo; and \u0026ldquo;emu metal\u0026rdquo;, but it doesn\u0026rsquo;t give me any significant results, until I found this post\u0026hellip; Cool looking decorations Looks like what we are looking for..\nThe post says the sculptures are at East of Tailem Drive, therefore, I used Google Street View to search the area, till I found the exact spot!\nFound them! FLAG: DUCTF{-29.5506,153.2777}\nmarketing\r#\rGoogle for MC Fat Monke again, this time we found a X (Twitter) Post under DownUnderCTF\u0026rsquo;s account.\nThe flag is actually here if you observe carefully\u0026hellip;\nCan\u0026rsquo;t see it? Let me show you. Top left corner FLAG: DUCTF{doing_a_bit_of_marketing}\nPerfect clear for OSINT challenges!\r#\rü•≥ Conclusion\r#\rThe challenges this year were fantastic, especially \u0026lsquo;offtheramp\u0026rsquo;, which is an experience I will never forget for the rest of my life (and all the time spent on it that I\u0026rsquo;ll never get back ü•≤).\nIts a long writeup, I hope you enjoyed reading them!\n"},{"id":5,"href":"/content/UIUCTF24/","title":"UIUCTF 2024 Writeup","section":"Content","content":"\rüí° UIUCTF2024, hosted by SIGPwny, the cybersecurity club at the University of Illinois Urbana-Champaign (UIUC).\rFor this CTF competition, I am only able to do some OSINT challenges, so here is my writeup for UIUCTF2024!\nOSINT\r#\rHip With the Youth\r#\rThis challenge requires players to find the flag on the social media of Long Island Subway Authority (LISA).\nFrom the Instagram account, there are no flags visible.\nLisa\u0026#39;s Instagram Account After looking through the posts and followers list, nothing useful is found. However, when I checked out the Threads account, and the flag is found immediately on the first thread.\nFLAG: uiuctf{7W1773r_K!113r_321879}\nAn Unlikely Partnership\r#\rThis challenge requires players to find out the partnership of LISA with a surprise influencer.\nThe LinkedIn account of LISA transit is accessible from the Threads page.\nTo find the influencer involved, I poked around every link and posts on the account. Then I came across this\u0026hellip;\nWho is UIUC Chan? Looks sus\u0026hellip;\nAfter clicking into UIUC Chan\u0026rsquo;s LinkedIn page, the flag is found!\nFLAG: uiuctf{0M160D_U1UCCH4N_15_MY_F4V0r173_129301}\nNight\r#\rA night view photo is given, requiring players to find the street name and city name of where the photo is taken.\nAt first, I tried searching by using keywords such as \u0026ldquo;building with a hemisphere roof\u0026rdquo; and \u0026ldquo;building with a dome\u0026rdquo;, but I can\u0026rsquo;t get a result similar with the reference image.\nAfter using Google Images, this is the closest result I can get (pretty useful)\nAnd here is a question I asked ChatGPT for a little hint\u0026hellip;\nSorry Mods.. All there is left to do is to move the little yellow man in Google Maps around to get the exact same view. After throwing the little man around, this is what I got..\nTried uiuctf{I90,Boston} but it didn\u0026rsquo;t work. So I asked the moderator. Here is his(her) response.\nhmm... So I backed up a little, and here is what I found!\nHere is the correct location. FLAG: uiuctf{Arlington Street, Boston}\nIn conclusion, although I still find some challenges difficult, I thoroughly enjoyed solving the OSINT puzzles and felt a great sense of satisfaction upon completing them.\n"},{"id":6,"href":"/content/wani-ctf/","title":"Wani Ctf 2024 Writeup","section":"Content","content":"This is my writeup for Wani CTF, an event organized by Osaka University CTF Club, Wani Hackase (Rank 304th)\nForensics\r#\rSurveillance of sus\r#\rA binary file is given, and after some investigation, it has a RDP8BMP Header.\nThis is the capti for the image. To get the BMP images, I have referred to this article and use a Python Script (bmc-tools).\nAfter all the bmp files are recovered, the flag can be readed in plain sight if the view is changed to \u0026ldquo;Large icons\u0026rdquo;.\nFlag : FLAG{RDP_is_useful_yipeee}\nTiny USB\r#\rA disk image file is given.\nFTK Imager is used to read and analyze the disc file. After some digging, the flag is found!\nFlag: FLAG{hey_i_just_bought_a_usb}\nTiny-10px\r#\rA small image is given.\nBased on my instincts, this could be one of those image steganography where the author resized the image of a large image.\nSo I followed the instructions of this article to recover the image by changing the hex values of height and width (multiple times).\nAfter some effort, a message is visible from the image. (although reading it may take some time).\nFlag: FLAG{b1g_en0ugh}\nConclusion\r#\rThis is my 6th CTF event participation, and I am happy that I can solve some easy to medium level challenges now!\nThank you for reading.\n"},{"id":7,"href":"/content/vsctf/","title":"VSCTF Awa-Jelly Writeup","section":"Content","content":"For this CTF, I only solved one question by myself, so here is the writeup for awa-jelly (reverse engineering)\nBasically, the challenge is to recover the redacted input text so that the output is same as displayed.\nAlthough I know Python a little, I decided to use the traditional method: Excel ü§¶üèª\nThroughout my process, I tried to recover the scrambling algorithm by using Python, and I discovered some characters cannot be displayed after scrambling, which caused my natural approach to be weird due to some characters are missing.\nBy removing those letters, I understood the scramble method, all that is left to do is to reassemble the sequence of the output text of the picture above. Here are the results.\nPs: Finally, I am able to code something that return the same results!\r#\r# Determine the sequence of indexes after scrambled input = \u0026#34;1234567890_wrtyuioasdfghjlcbnm,.\u0026#34; output = \u0026#34;u_ioasd3fg6h9jwl52cb7nm,.t1480ry\u0026#34; lis = [] # List of index after scrambled seq = [] for i in input: lis += i for i in output: for j in lis: if i == j: seq.append(lis.index(j)) print(f\u0026#34;seq = {seq}\u0026#34;) loli = \u0026#34;1o1i_awlaw_aowsay3wa0awa!iJlooHi\u0026#34; redacted = \u0026#34;\u0026#34; o = 0 while o \u0026lt; len(loli) - 1: for i in seq: if i == o: redacted += loli[seq.index(i)] o += 1 print(f\u0026#34;Recovered string is {redacted}\u0026#34;) Flag: vsctf{J3lly_0oooosHii11i_awawawawaawa!}\n"}]